//
//  EAGLView.h
//  TextureWrap
//
//  Created by Dan Ginsburg on 6/13/09.
//  Copyright __MyCompanyName__ 2009. All rights reserved.
//

#import <UIKit/UIKit.h>
#include "libavutil/pixfmt.h"

#ifdef __cplusplus
extern "C" {
#endif
#undef AVMediaType
#define AVMediaType FFMpeg_AVMediaType
#include <libavcodec/avcodec.h>
#undef AVMediaType
#define AVMediaType Cocoa_AVMediaType
#include <AVFoundation/AVFoundation.h>
#undef AVMediaType
#ifdef __cplusplus
}
#endif

/*
This class wraps the CAEAGLLayer from CoreAnimation into a convenient UIView subclass.
The view content is basically an EAGL surface you render your OpenGL scene into.
Note that setting the view non-opaque will only work if the EAGL surface has an alpha channel.
*/

typedef enum
{
	eFeDewarpNone = 0,  // No dewarp
	eFeDewarpPano = 1,  // panorama projection
	eFeDewarpRect = 2,  // rectilinear projection
    eFeDewarpFullHD = 3 // full hd panorama
} EFisheyeDewarpType;

typedef enum
{
    eYUV = 0,
    eFisheye = 1,
    eMultiSensor = 2,
    eStereo = 3,
} ERenderType;

typedef struct
{
    WORD		wSensorWidth;
    WORD		wSensorHeight;
    WORD		wOffsetX;
    WORD		wOffsetY;
    WORD		wCropWidth;
    WORD		wCropHeight;
} TSensorCropInfo;

typedef struct
{
    WORD		    wCenterX;
    WORD		    wCenterY;
    WORD		    wRadius;
    BYTE		    byId;
    BYTE		    byInstallation;
    BYTE		    byStreamType;
    TSensorCropInfo tSensorCropInfo;
} TFisheyeInfo;

typedef struct
{
    int32_t			wX;
    int32_t			wY;
    uint32_t		wW;
    uint32_t		wH;
} TMultisensorROI;

typedef struct
{
    BYTE		    byId;
    BYTE		    bySensorNum;
    WORD		    wPanoramaW;
    WORD		    wPanoramaH;
    TMultisensorROI atROIs[4];
} TMultisensorInfo;

typedef struct
{
    double adM1[3][3];
    double adD1[12][1];
    double adM2[3][3];
    double adD2[12][1];
    double adR[3][3];
    double adT[3][1];
    int    iRoiWidth;
    int    iRoiHeight;
    int    iOrgWidth;
    int    iOrgHeight;
    float  fZoomInFactor;
    int    iZoomInOffsetX;
    int    iZoomInOffsetY;
} TStereoCameraInfo;

typedef struct
{
    WORD        wPitch;
    WORD        wYaw;
    WORD        wRoll;
} TDeviceAngleInfo;

typedef struct _tRenderInfo
{
    int eRenderType;
    //Fisheye 1
    TFisheyeInfo tFisheyeInfo;
    //MultiSensor 2
    TMultisensorInfo tMultisensorInfo;
    //Stereo 3
    TStereoCameraInfo tStereoCameraInfo;
    //
    TDeviceAngleInfo tDeviceAngleInfo;
} TRenderInfo;

typedef struct
{
    GLuint        auiWidth[3];        // Width  (3 planes)
    GLuint        auiHeight[3];    // Height (3 planes)
    GLuint        auiStrides[3];
    unsigned int  auiTextureID[3];    // Texture name which is generated by glGenTextures (3 planes)
    uint8_t*      apbyBuffer[3];
    enum AVPixelFormat ePixelFormat;                    // Pixel format
} TTextureBuffer;

typedef struct
{
	// Handle to a program object
	GLuint programObject;
	
	// Attribute locations
	GLint  positionLoc;
	GLint  texCoordLoc;
	
	// Sampler locations
    // Sampler locations
    GLint baseYLoc1;
    GLint baseULoc1;
    GLint baseVLoc1;
    GLint baseYLoc2;
    GLint baseULoc2;
    GLint baseVLoc2;
    
    GLint baseZoomLoc;
    GLint baseSizeLoc;
	
	// Texture handle
    // Texture handle
    GLuint baseYTexId1;
    GLuint baseUTexId1;
    GLuint baseVTexId1;
    GLuint baseYTexId2;
    GLuint baseUTexId2;
    GLuint baseVTexId2;
    
    GLint baseHSV;
    GLuint colorMatrix;
    GLuint largeStream;
    
    TTextureBuffer buffer1;
    TTextureBuffer buffer2;
    
    bool isOpengl3;
    
} UserData;

@class EAGLView;
@protocol EAGLViewDelegate<NSObject>

@optional
- (NSDictionary *)fisheyePTZLocationForEAGLView:(EAGLView *)eaglview; // for fisheye

@end

@interface EAGLView : UIView

@property (weak, nonatomic) id<EAGLViewDelegate> delegate;
@property (nonatomic, strong) UILabel *label;
@property (nonatomic, strong) UILabel *debugLabel;

- (NSDictionary *)fisheyePTZLocation; // for fisheye

@end


